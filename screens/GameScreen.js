import React, { useState, useRef, useEffect } from 'react'
import { View, Text, StyleSheet, Button, Alert } from 'react-native'

import NumberContainer from '../components/NumberContainer'
import Card from '../components/Card'

// NB: useRef allows you to survive a component which survives a re-render - we want this here to lock in a min and max which can change

const generateRandomNum = (min, max, exclude) => {
  min = Math.ceil(min)
  // this rounds the number up
  max = Math.floor(max)
  // this rounds the number down

  const rndNum = Math.floor(Math.random() * (max - min)) + min
  // max - min: to make the number between min and max

  if (rndNum === exclude) {
    return generateRandomNum(min, max, exclude)
    // calling a function from inside that same function is called RECURSION
  } else {
    return rndNum
  }
}
// this function generates us a random number

const GameScreen = ({ userChoice, onGameOver }) => {
  const [currentGuess, setCurrentGuess] = useState(
    generateRandomNum(1, 100, userChoice)
  )
  // This is the state for the guess of the computer - changes when user gives a new hint - min 1, max 100, exclude userChoice

  const [rounds, setRounds] = useState(0)
  const currentLow = useRef(1)
  const currentHigh = useRef(100)

  useEffect(() => {
    // rendered after re-render of component
    if (currentGuess === userChoice) {
      onGameOver(rounds)
    }
  }, [currentGuess, userChoice, onGameOver])
  // have to define any dependencies from outside the useEffect

  const nextGuessHandler = (direction) => {
    if (
      (direction === 'lower' && currentGuess < userChoice) ||
      (direction === 'greater' && currentGuess > userChoice)
    ) {
      Alert.alert("Don't lie!", 'You have pressed the wrong button...', [
        { text: 'Sorry!', style: 'cancel' }
      ])
      return
    }
    if (direction === 'lower') {
      currentHigh.current = currentGuess
      // this is bascially telling the computer if you've guessed too high then i know this number that i guessed is my current high, and cant go higher, so needs to be saved
      // references generated by useRef have a current property where the actual value is stored in - it doesnt change on re render
      // the ref sets the state
    } else {
      currentLow.current = currentGuess
    }
    const nextNumber = generateRandomNum(
      currentLow.current,
      currentHigh.current,
      currentGuess
    )
    setCurrentGuess(nextNumber)
    setRounds((currentRounds) => currentRounds + 1)
    // now the component will be re rendered and the next guess will show
  }

  // we had to use 'useRef' because the minimum number will change when the computer guesses, as will the max e.g. if they guess 10 and its higher, the  minimum must now be 10 and so on

  return (
    <View style={styles.screen}>
      <Text>Opponents Guess:</Text>
      <NumberContainer>{currentGuess}</NumberContainer>
      <Card style={styles.buttonContainer}>
        <Button title="LOWER" onPress={nextGuessHandler.bind(this, 'lower')} />
        <Button
          title="HIGHER"
          onPress={nextGuessHandler.bind(this, 'greater')}
        />
      </Card>
    </View>
  )
}

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    padding: 10,
    alignItems: 'center'
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginTop: 20,
    width: 300,
    maxWidth: '80%'
  }
})

export default GameScreen
